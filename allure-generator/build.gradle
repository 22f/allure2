description = 'Allure Report Generator'

apply from: "${gradleScriptDir}/maven-publish.gradle"
apply from: "${gradleScriptDir}/bintray.gradle"
apply plugin: 'maven'

apply plugin: 'com.moowork.node'

node {
    version = '8.1.3'
    npmVersion = '5.6.0'
    download = true
}

task buildWeb(type: NpmTask) {
    inputs.files(fileTree('node_modules'))
    inputs.files(fileTree('src/main/javascript'))
    inputs.file('package.json')
    inputs.file('package-lock.json')
    inputs.file('webpack.config.js')

    outputs.dir('build/resources/main')

    args = ['run', 'build']
}

buildWeb.dependsOn npm_install
processResources.dependsOn buildWeb

dependencies {
    compile project(':allure-plugin-api')
    compile project(':allure-reader')
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml')
    compile('commons-io:commons-io')
    compile('io.qameta.allure:allure2-model-api')
    compile('org.allurefw:allure1-model')
    compile('org.apache.httpcomponents:httpclient')
    compile('org.apache.tika:tika-core')
    compileOnly('org.projectlombok:lombok')
    testCompile('com.google.guava:guava')
    testCompile('io.qameta.allure:allure-java-commons')
    testCompile('junit:junit')
    testCompile('org.apache.commons:commons-text')
    testCompile('org.assertj:assertj-core')
    testCompile('org.mockito:mockito-core')
    testCompile('org.slf4j:slf4j-simple')
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives sourceJar
}

def resultsDirectory = findProperty('results') ?: 'demo'

task cleanUpDevReport(type: Delete) {
    delete file('build/dev-report')
}

task generateDevReport(type: JavaExec) {
    dependsOn cleanUpDevReport
    main = 'io.qameta.allure.DummyReportGenerator'
    classpath = sourceSets.test.runtimeClasspath
    args = [
            file("test-data/${resultsDirectory}"),
            file('build/dev-report')
    ]
}

task dev {
    dependsOn generateDevReport, npm_install, npm_start
}